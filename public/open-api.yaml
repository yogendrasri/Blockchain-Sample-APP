openapi: '3.0.0'
info:
  title: 'fabcar API(s)'
  version: '1.0.0'
  description: >-
    for testing the rest of the API(S). 
schemes:
- https
paths:

  /api/createOrganization:
    post:
      summary: Register and enroll Organization to blockchain network
      tags:
      - Organization Registeration and verification
      description: Register and enroll Organization to blockchain network
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/userEnrollSource"
      responses:
        200:
          description: Success
          content:
            application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                      example: true
                    result:
                      type: string
                      example: "user enrolled successfully"
                    
        500:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/definitions/ErrorResponse"  
             
  /api/getOrganization/{userId}:
    get:      
      tags:
      - "Organization Registeration and verification"
      summary: "verify Organization"
      description: "verify Organization"
      parameters:           
      - name: userId
        in: path
        description: verify Organization
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content: 
           application/json:
              schema:
              $ref: "#/definitions/userEnrollSource"

        500:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/definitions/ErrorResponse"
                
  /api/createCar/{userId}:
    post:
      summary: Create Car in blockchain network
      tags:
      - Fabcar Example
      description: Create Car in blockchain network
      parameters:           
      - name: userId
        in: path
        description: Create car
        required: true
        schema:
          type: string      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/definitions/createCarSource"
      responses:
        200:
          description: Success
          content:
            application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: boolean
                      example: true
                    result:
                      type: string
                      example: "Car Created successfully"
                    
        500:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/definitions/ErrorResponse"
                
  /api/queryAllCars/{userId}:
    get:
      tags:
      - "Fabcar Example"
      summary: "queryAllCars"
      description: "Returns all cars"
      parameters:           
      - name: userId
        in: path
        description: Returns all cars
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content: 
           application/json:
              schema:
              $ref: "#/definitions/createCarSource"
        500:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/definitions/ErrorResponse" 
definitions:
  ErrorResponse:
    type: object
    properties:
      errors:
        type: array
        items:
          type: object
          properties:
            code:
              type: integer
              example: 500
            message:
              type: string
              example: "Error message"
            details:
              type: object
  userEnrollSource:
    properties:
        org:
          type: string
          example: "org1msp"
        userId:
          type: string
          example: "user1"
        pw:
          type: string
          example: "user1234"
        affiliation:
          type: string
          example: ""
        role:
          type: string
          example: "client"  
  createCarSource:
    properties:        
        carNumber:
          type: string
          example: "CAR12"
        color:
          type: string
          example: "brown"
        make:
          type: string
          example: "Holden"
        model:
          type: string
          example: "Barina"
        owner:
          type: string
          example: "Shotaro"        
            
components:
 # securitySchemes:
 #   OAuth2:
 #     type: oauth2
      



  

